"use client";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { motion } from "framer-motion";
import {
  MessageCircle,
  Sparkles,
  BookOpen,
  ArrowRight,
  Play,
  Heart,
  Star,
  Zap,
  HelpCircle,
  Users,
  Shield,
  Rocket,
} from "lucide-react";
import { useRouter } from "next/navigation";
import { useLoading } from "@/providers/loading-provider";

export default function FAQPage() {
  const router = useRouter();
  const { startLoading } = useLoading();

  const handleNavigation = (path: string) => {
    startLoading(path);
    router.push(path);
  };

  const faqCategories = [
    {
      icon: "ü§ñ",
      title: "AI & Tr√≤ Chuy·ªán",
      color: "from-blue-500 to-cyan-500",
      questions: [
        {
          question: "AI c√≥ th·ªÉ hi·ªÉu ƒë∆∞·ª£c √Ω t∆∞·ªüng c·ªßa t√¥i kh√¥ng?",
          answer:
            "C√≥! AI c·ªßa ch√∫ng t√¥i ƒë∆∞·ª£c hu·∫•n luy·ªán ƒë·ªÉ hi·ªÉu v√† ph√°t tri·ªÉn √Ω t∆∞·ªüng c√¢u chuy·ªán t·ª´ m√¥ t·∫£ ƒë∆°n gi·∫£n nh·∫•t. B·∫°n ch·ªâ c·∫ßn chia s·∫ª √Ω t∆∞·ªüng c∆° b·∫£n, AI s·∫Ω ƒë·∫∑t c√¢u h·ªèi ƒë·ªÉ hi·ªÉu r√µ h∆°n v√† gi√∫p b·∫°n ph√°t tri·ªÉn th√†nh c√¢u chuy·ªán ho√†n ch·ªânh.",
        },
        {
          question: "T√¥i c√≥ th·ªÉ tr√≤ chuy·ªán b·∫±ng ti·∫øng Vi·ªát kh√¥ng?",
          answer:
            "T·∫•t nhi√™n! ChatStoryAI h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß ti·∫øng Vi·ªát. B·∫°n c√≥ th·ªÉ tr√≤ chuy·ªán, t·∫°o truy·ªán v√† t∆∞∆°ng t√°c ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n.",
        },
        {
          question: "AI c√≥ th·ªÉ t·∫°o ra nh·ªØng th·ªÉ lo·∫°i truy·ªán n√†o?",
          answer:
            "AI c√≥ th·ªÉ h·ªó tr·ª£ t·∫°o m·ªçi th·ªÉ lo·∫°i: t√¨nh c·∫£m, phi√™u l∆∞u, kinh d·ªã, khoa h·ªçc vi·ªÖn t∆∞·ªüng, fantasy, trinh th√°m, h√†i h∆∞·ªõc v√† nhi·ªÅu th·ªÉ lo·∫°i kh√°c. Ch·ªâ c·∫ßn n√≥i v·ªõi AI th·ªÉ lo·∫°i b·∫°n mu·ªën!",
        },
      ],
    },
    {
      icon: "üìù",
      title: "T·∫°o & Vi·∫øt Truy·ªán",
      color: "from-green-500 to-emerald-500",
      questions: [
        {
          question: "L√†m sao ƒë·ªÉ b·∫Øt ƒë·∫ßu vi·∫øt truy·ªán ƒë·∫ßu ti√™n?",
          answer:
            "R·∫•t ƒë∆°n gi·∫£n! B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu b·∫±ng c√°ch tr√≤ chuy·ªán v·ªõi AI v·ªÅ √Ω t∆∞·ªüng c·ªßa m√¨nh, ho·∫∑c s·ª≠ d·ª•ng editor ƒë·ªÉ vi·∫øt tr·ª±c ti·∫øp. AI s·∫Ω h·ªó tr·ª£ b·∫°n ph√°t tri·ªÉn c·ªët truy·ªán, nh√¢n v·∫≠t v√† t·∫°o ra n·ªôi dung h·∫•p d·∫´n.",
        },
        {
          question: "T√¥i c√≥ th·ªÉ ch·ªânh s·ª≠a truy·ªán sau khi t·∫°o kh√¥ng?",
          answer:
            "C√≥! B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a, b·ªï sung, x√≥a b·∫•t k·ª≥ ph·∫ßn n√†o c·ªßa truy·ªán. H·ªá th·ªëng l∆∞u t·ª± ƒë·ªông gi√∫p b·∫°n kh√¥ng lo m·∫•t d·ªØ li·ªáu.",
        },
        {
          question: "C√≥ gi·ªõi h·∫°n ƒë·ªô d√†i truy·ªán kh√¥ng?",
          answer:
            "Kh√¥ng c√≥ gi·ªõi h·∫°n c·ª©ng v·ªÅ ƒë·ªô d√†i. B·∫°n c√≥ th·ªÉ vi·∫øt t·ª´ truy·ªán ng·∫Øn v√†i trang ƒë·∫øn ti·ªÉu thuy·∫øt d√†i h√†ng trƒÉm ch∆∞∆°ng. H·ªá th·ªëng ƒë∆∞·ª£c t·ªëi ∆∞u ƒë·ªÉ x·ª≠ l√Ω m·ªçi quy m√¥.",
        },
      ],
    },
    {
      icon: "üë•",
      title: "C·ªông ƒê·ªìng & Chia S·∫ª",
      color: "from-purple-500 to-pink-500",
      questions: [
        {
          question: "L√†m sao ƒë·ªÉ chia s·∫ª truy·ªán v·ªõi m·ªçi ng∆∞·ªùi?",
          answer:
            "Sau khi ho√†n th√†nh, b·∫°n c√≥ th·ªÉ xu·∫•t b·∫£n truy·ªán l√™n th∆∞ vi·ªán c√¥ng c·ªông. ƒê·ªôc gi·∫£ c√≥ th·ªÉ t√¨m th·∫•y, ƒë·ªçc v√† t∆∞∆°ng t√°c v·ªõi t√°c ph·∫©m c·ªßa b·∫°n.",
        },
        {
          question: "T√¥i c√≥ th·ªÉ nh·∫≠n ph·∫£n h·ªìi t·ª´ ƒë·ªôc gi·∫£ kh√¥ng?",
          answer:
            "C√≥! ƒê·ªôc gi·∫£ c√≥ th·ªÉ b√¨nh lu·∫≠n, ƒë√°nh gi√° v√† chia s·∫ª c·∫£m nh·∫≠n v·ªÅ truy·ªán c·ªßa b·∫°n. ƒêi·ªÅu n√†y gi√∫p b·∫°n c·∫£i thi·ªán k·ªπ nƒÉng vi·∫øt v√† t·∫°o ra nh·ªØng t√°c ph·∫©m t·ªët h∆°n.",
        },
        {
          question: "Truy·ªán c·ªßa t√¥i c√≥ ƒë∆∞·ª£c b·∫£o v·ªá b·∫£n quy·ªÅn kh√¥ng?",
          answer:
            "B·∫°n gi·ªØ to√†n quy·ªÅn s·ªü h·ªØu tr√≠ tu·ªá ƒë·ªëi v·ªõi n·ªôi dung m√¨nh t·∫°o ra. Ch√∫ng t√¥i ch·ªâ cung c·∫•p n·ªÅn t·∫£ng ƒë·ªÉ b·∫°n s√°ng t·∫°o v√† chia s·∫ª.",
        },
      ],
    },
    {
      icon: "‚öôÔ∏è",
      title: "T√≠nh NƒÉng & H·ªó Tr·ª£",
      color: "from-orange-500 to-red-500",
      questions: [
        {
          question: "T√¥i c√≥ th·ªÉ s·ª≠ d·ª•ng mi·ªÖn ph√≠ kh√¥ng?",
          answer:
            "C√≥! ChatStoryAI cung c·∫•p nhi·ªÅu t√≠nh nƒÉng mi·ªÖn ph√≠ ƒë·ªÉ b·∫°n b·∫Øt ƒë·∫ßu. Ch√∫ng t√¥i c≈©ng c√≥ c√°c g√≥i premium v·ªõi t√≠nh nƒÉng n√¢ng cao cho ng∆∞·ªùi d√πng chuy√™n nghi·ªáp.",
        },
        {
          question: "D·ªØ li·ªáu c·ªßa t√¥i c√≥ an to√†n kh√¥ng?",
          answer:
            "Tuy·ªát ƒë·ªëi! Ch√∫ng t√¥i s·ª≠ d·ª•ng m√£ h√≥a cao c·∫•p v√† tu√¢n th·ªß c√°c ti√™u chu·∫©n b·∫£o m·∫≠t qu·ªëc t·∫ø ƒë·ªÉ b·∫£o v·ªá d·ªØ li·ªáu c·ªßa b·∫°n.",
        },
        {
          question: "T√¥i g·∫∑p l·ªói th√¨ li√™n h·ªá ai?",
          answer:
            "B·∫°n c√≥ th·ªÉ li√™n h·ªá team h·ªó tr·ª£ qua email ho·∫∑c chat tr·ª±c ti·∫øp. Ch√∫ng t√¥i cam k·∫øt ph·∫£n h·ªìi trong v√≤ng 24h v√† h·ªó tr·ª£ t·∫≠n t√¨nh.",
        },
      ],
    },
  ];

  return (
    <div className="min-h-screen flex flex-col">
      <main className="flex-1 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-slate-900 dark:via-blue-900/20 dark:to-purple-900/20">
        {/* Hero Section */}
        <section className="relative overflow-hidden py-20">
          {/* Background Effects */}
          <div className="absolute inset-0">
            {[...Array(6)].map((_, i) => (
              <motion.div
                key={i}
                className="absolute w-32 h-32 rounded-full blur-3xl opacity-20"
                style={{
                  background: `linear-gradient(45deg, ${
                    [
                      "#3B82F6",
                      "#8B5CF6",
                      "#F59E0B",
                      "#10B981",
                      "#EF4444",
                      "#EC4899",
                    ][i]
                  }, transparent)`,
                  left: `${Math.random() * 100}%`,
                  top: `${Math.random() * 100}%`,
                }}
                animate={{
                  x: [0, 100, -50, 0],
                  y: [0, -100, 50, 0],
                  scale: [1, 1.2, 0.8, 1],
                }}
                transition={{
                  duration: 10 + Math.random() * 5,
                  repeat: Infinity,
                  ease: "easeInOut",
                }}
              />
            ))}
          </div>

          <div className="container mx-auto px-4 relative z-10">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              className="text-center space-y-6 mb-16"
            >
              <Badge
                variant="outline"
                className="mb-4 bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-300 dark:border-blue-700"
              >
                <HelpCircle className="w-3 h-3 mr-1" />
                C√¢u H·ªèi Th∆∞·ªùng G·∫∑p
              </Badge>

              <h1 className="text-4xl md:text-6xl font-bold leading-tight">
                <span className="bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">
                  Gi·∫£i ƒê√°p
                </span>
                <br />
                <span className="text-foreground">M·ªçi Th·∫Øc M·∫Øc</span>
              </h1>

              <p className="text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed">
                T√¨m c√¢u tr·∫£ l·ªùi cho nh·ªØng c√¢u h·ªèi ph·ªï bi·∫øn v·ªÅ ChatStoryAI. N·∫øu
                kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi, ƒë·ª´ng ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i!
              </p>

              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.4 }}
                className="flex flex-col sm:flex-row gap-4 justify-center"
              >
                <Button
                  size="lg"
                  className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg hover:shadow-xl transition-all duration-300"
                  onClick={() => handleNavigation("/contact")}
                >
                  <MessageCircle className="w-5 h-5 mr-2" />
                  Li√™n H·ªá H·ªó Tr·ª£
                </Button>

                <Button
                  size="lg"
                  variant="outline"
                  className="border-2 hover:bg-blue-50 dark:hover:bg-blue-900/20"
                  onClick={() => handleNavigation("/guide/basic")}
                >
                  <BookOpen className="w-5 h-5 mr-2" />
                  Xem H∆∞·ªõng D·∫´n
                </Button>
              </motion.div>
            </motion.div>
          </div>
        </section>

        {/* FAQ Categories */}
        <section className="py-20">
          <div className="container mx-auto px-4">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {faqCategories.map((category, categoryIndex) => (
                <motion.div
                  key={categoryIndex}
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: categoryIndex * 0.1 }}
                  viewport={{ once: true }}
                  className="group"
                >
                  <Card className="h-full relative overflow-hidden border-0 shadow-lg hover:shadow-2xl transition-all duration-500 bg-white/80 dark:bg-slate-800/80 backdrop-blur-xl">
                    {/* Gradient Background */}
                    <div
                      className={`absolute inset-0 bg-gradient-to-br ${category.color} opacity-5 group-hover:opacity-10 transition-opacity duration-500`}
                    />

                    <CardHeader className="relative">
                      <motion.div
                        className="text-4xl mb-4"
                        whileHover={{ scale: 1.1, rotate: 5 }}
                        transition={{
                          type: "spring",
                          stiffness: 400,
                          damping: 10,
                        }}
                      >
                        {category.icon}
                      </motion.div>
                      <CardTitle className="text-xl group-hover:bg-gradient-to-r group-hover:from-blue-600 group-hover:to-purple-600 group-hover:bg-clip-text group-hover:text-transparent transition-all duration-300">
                        {category.title}
                      </CardTitle>
                    </CardHeader>

                    <CardContent className="relative">
                      <Accordion type="single" collapsible className="w-full">
                        {category.questions.map((faq, faqIndex) => (
                          <AccordionItem
                            key={faqIndex}
                            value={`item-${categoryIndex}-${faqIndex}`}
                          >
                            <AccordionTrigger className="text-left hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
                              {faq.question}
                            </AccordionTrigger>
                            <AccordionContent className="text-muted-foreground leading-relaxed">
                              {faq.answer}
                            </AccordionContent>
                          </AccordionItem>
                        ))}
                      </Accordion>
                    </CardContent>
                  </Card>
                </motion.div>
              ))}
            </div>
          </div>
        </section>

        {/* Bottom CTA */}
        <section className="py-20">
          <div className="container mx-auto px-4">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              viewport={{ once: true }}
              className="text-center space-y-6 bg-white/50 dark:bg-slate-800/50 backdrop-blur-xl rounded-3xl p-12 border border-white/20 dark:border-slate-700/50"
            >
              <div className="flex justify-center mb-4">
                <div className="flex items-center gap-2">
                  <Heart className="w-5 h-5 text-red-500" />
                  <Sparkles className="w-5 h-5 text-yellow-500" />
                  <Zap className="w-5 h-5 text-blue-500" />
                </div>
              </div>

              <h2 className="text-3xl font-bold">V·∫´n c√≤n th·∫Øc m·∫Øc?</h2>

              <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
                ƒê·ªôi ng≈© h·ªó tr·ª£ c·ªßa ch√∫ng t√¥i lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª° b·∫°n! Li√™n h·ªá
                ngay ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt.
              </p>

              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button
                  size="lg"
                  className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg hover:shadow-xl transition-all duration-300"
                  onClick={() => handleNavigation("/contact")}
                >
                  <MessageCircle className="w-5 h-5 mr-2" />
                  Li√™n H·ªá H·ªó Tr·ª£
                </Button>

                <Button
                  size="lg"
                  variant="outline"
                  className="border-2 hover:bg-blue-50 dark:hover:bg-blue-900/20"
                  onClick={() => handleNavigation("/ai")}
                >
                  <Rocket className="w-5 h-5 mr-2" />
                  Th·ª≠ Ngay
                </Button>
              </div>
            </motion.div>
          </div>
        </section>
      </main>
    </div>
  );
}
