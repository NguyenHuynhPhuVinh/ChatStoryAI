"use client"

import React, { useState, useEffect } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { ChatBubble } from "@/components/ui/chat-bubble"
import { Badge } from "@/components/ui/badge"
import { Star, Quote, ChevronLeft, ChevronRight } from "lucide-react"
import { Button } from "@/components/ui/button"

const testimonials = [
  {
    id: 1,
    name: "Minh Anh",
    role: "T√°c gi·∫£ truy·ªán ng·∫Øn",
    avatar: "/default-user.webp",
    rating: 5,
    story: "Truy·ªán Fantasy",
    messages: [
      {
        message: "ChatStory AI ƒë√£ gi√∫p t√¥i v∆∞·ª£t qua writer's block! T·ª´ m·ªôt √Ω t∆∞·ªüng m∆° h·ªì, AI ƒë√£ gi√∫p t√¥i ph√°t tri·ªÉn th√†nh m·ªôt c√¢u chuy·ªán ho√†n ch·ªânh.",
        isUser: true,
        timestamp: "2 ph√∫t tr∆∞·ªõc"
      },
      {
        message: "Th·∫≠t tuy·ªát v·ªùi! B·∫°n ƒë√£ t·∫°o ra m·ªôt th·∫ø gi·ªõi fantasy r·∫•t ƒë·ªôc ƒë√°o. H√£y ti·∫øp t·ª•c ph√°t tri·ªÉn nh·ªØng nh√¢n v·∫≠t th√∫ v·ªã n√†y nh√©! ‚ú®",
        isUser: false,
        timestamp: "1 ph√∫t tr∆∞·ªõc"
      }
    ]
  },
  {
    id: 2,
    name: "ƒê·ª©c Th√†nh",
    role: "H·ªçc sinh l·ªõp 12",
    avatar: "/default-user.webp",
    rating: 5,
    story: "Truy·ªán Khoa h·ªçc vi·ªÖn t∆∞·ªüng",
    messages: [
      {
        message: "L·∫ßn ƒë·∫ßu ti√™n t√¥i vi·∫øt truy·ªán v√† AI ƒë√£ h∆∞·ªõng d·∫´n t√¥i t·ª´ng b∆∞·ªõc m·ªôt c√°ch r·∫•t chi ti·∫øt v√† d·ªÖ hi·ªÉu.",
        isUser: true,
        timestamp: "5 ph√∫t tr∆∞·ªõc"
      },
      {
        message: "B·∫°n c√≥ t√†i nƒÉng vi·∫øt l√°ch! √ù t∆∞·ªüng v·ªÅ du h√†nh th·ªùi gian c·ªßa b·∫°n r·∫•t s√°ng t·∫°o. H√£y kh√°m ph√° th√™m nh·ªØng h·ªá qu·∫£ th√∫ v·ªã nh√©! üöÄ",
        isUser: false,
        timestamp: "3 ph√∫t tr∆∞·ªõc"
      }
    ]
  },
  {
    id: 3,
    name: "Thu H√†",
    role: "Blogger",
    avatar: "/default-user.webp",
    rating: 5,
    story: "Truy·ªán T√¨nh y√™u",
    messages: [
      {
        message: "AI hi·ªÉu ƒë∆∞·ª£c phong c√°ch vi·∫øt c·ªßa t√¥i v√† ƒë∆∞a ra nh·ªØng g·ª£i √Ω r·∫•t ph√π h·ª£p. C√¢u chuy·ªán t√¨nh y√™u c·ªßa t√¥i tr·ªü n√™n s·ªëng ƒë·ªông h∆°n nhi·ªÅu!",
        isUser: true,
        timestamp: "10 ph√∫t tr∆∞·ªõc"
      },
      {
        message: "C·∫£m x√∫c trong c√¢u chuy·ªán c·ªßa b·∫°n r·∫•t ch√¢n th·∫≠t! Nh·ªØng t√¨nh ti·∫øt b·∫°n t·∫°o ra th·ª±c s·ª± ch·∫°m ƒë·∫øn tr√°i tim ng∆∞·ªùi ƒë·ªçc. üíï",
        isUser: false,
        timestamp: "8 ph√∫t tr∆∞·ªõc"
      }
    ]
  },
  {
    id: 4,
    name: "Ho√†ng Nam",
    role: "Nh√† vƒÉn nghi·ªáp d∆∞",
    avatar: "/default-user.webp",
    rating: 5,
    story: "Truy·ªán Trinh th√°m",
    messages: [
      {
        message: "T√¥i ƒë√£ vi·∫øt ƒë∆∞·ª£c 5 ch∆∞∆°ng ƒë·∫ßu ti√™n c·ªßa ti·ªÉu thuy·∫øt trinh th√°m nh·ªù s·ª± h·ªó tr·ª£ c·ªßa AI. C·ªët truy·ªán ch·∫∑t ch·∫Ω v√† h·∫•p d·∫´n!",
        isUser: true,
        timestamp: "15 ph√∫t tr∆∞·ªõc"
      },
      {
        message: "B·∫°n ƒë√£ t·∫°o ra nh·ªØng manh m·ªëi r·∫•t th√¥ng minh! K·∫ª th·ªß √°c trong c√¢u chuy·ªán c·ªßa b·∫°n th·ª±c s·ª± b√≠ ·∫©n v√† kh√≥ ƒëo√°n. üïµÔ∏è",
        isUser: false,
        timestamp: "12 ph√∫t tr∆∞·ªõc"
      }
    ]
  }
]

export function ChatTestimonials() {
  const [currentTestimonial, setCurrentTestimonial] = useState(0)
  const [isAutoPlaying, setIsAutoPlaying] = useState(true)

  useEffect(() => {
    if (!isAutoPlaying) return

    const interval = setInterval(() => {
      setCurrentTestimonial((prev) => (prev + 1) % testimonials.length)
    }, 5000)

    return () => clearInterval(interval)
  }, [isAutoPlaying])

  const nextTestimonial = () => {
    setCurrentTestimonial((prev) => (prev + 1) % testimonials.length)
    setIsAutoPlaying(false)
  }

  const prevTestimonial = () => {
    setCurrentTestimonial((prev) => (prev - 1 + testimonials.length) % testimonials.length)
    setIsAutoPlaying(false)
  }

  const current = testimonials[currentTestimonial]

  return (
    <section className="py-20 px-4 relative overflow-hidden">
      {/* Background */}
      <div className="absolute inset-0 bg-gradient-to-br from-green-50 via-blue-50 to-purple-50 dark:from-green-900/10 dark:via-blue-900/10 dark:to-purple-900/10" />
      
      <div className="container mx-auto max-w-6xl relative z-10">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <Badge variant="outline" className="mb-4 bg-green-50 text-green-700 border-green-200 dark:bg-green-900/20 dark:text-green-300 dark:border-green-700">
            <Quote className="w-3 h-3 mr-1" />
            C√¢u Chuy·ªán Th√†nh C√¥ng
          </Badge>
          
          <h2 className="text-3xl md:text-5xl font-bold mb-6">
            <span className="bg-gradient-to-r from-green-600 via-blue-600 to-purple-600 bg-clip-text text-transparent">
              Ng∆∞·ªùi D√πng N√≥i G√¨
            </span>
            <br />
            <span className="text-foreground">V·ªÅ ChatStory AI</span>
          </h2>
          
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed">
            H√†ng ngh√¨n t√°c gi·∫£ ƒë√£ tin t∆∞·ªüng v√† s·ª≠ d·ª•ng ChatStory AI ƒë·ªÉ bi·∫øn √Ω t∆∞·ªüng th√†nh nh·ªØng c√¢u chuy·ªán tuy·ªát v·ªùi
          </p>
        </motion.div>

        <div className="grid lg:grid-cols-2 gap-12 items-center">
          {/* Testimonial Info */}
          <motion.div
            key={currentTestimonial}
            initial={{ opacity: 0, x: -50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6 }}
            className="space-y-6"
          >
            {/* User Info */}
            <div className="flex items-center gap-4">
              <div className="w-16 h-16 rounded-full bg-gradient-to-br from-blue-500 to-purple-500 flex items-center justify-center text-white text-xl font-bold">
                {current.name.charAt(0)}
              </div>
              <div>
                <h3 className="text-xl font-bold">{current.name}</h3>
                <p className="text-muted-foreground">{current.role}</p>
                <div className="flex items-center gap-1 mt-1">
                  {Array.from({ length: current.rating }).map((_, i) => (
                    <Star key={i} className="w-4 h-4 fill-yellow-400 text-yellow-400" />
                  ))}
                </div>
              </div>
            </div>

            {/* Story Badge */}
            <Badge variant="secondary" className="bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300">
              üìö {current.story}
            </Badge>

            {/* Quote */}
            <div className="relative">
              <Quote className="absolute -top-2 -left-2 w-8 h-8 text-muted-foreground/20" />
              <blockquote className="text-lg leading-relaxed pl-6">
                "{current.messages[0].message}"
              </blockquote>
            </div>

            {/* Navigation */}
            <div className="flex items-center justify-between">
              <div className="flex gap-2">
                {testimonials.map((_, index) => (
                  <button
                    key={index}
                    onClick={() => {
                      setCurrentTestimonial(index)
                      setIsAutoPlaying(false)
                    }}
                    className={`w-2 h-2 rounded-full transition-all duration-300 ${
                      index === currentTestimonial
                        ? "bg-blue-500 w-8"
                        : "bg-muted-foreground/30 hover:bg-muted-foreground/50"
                    }`}
                  />
                ))}
              </div>

              <div className="flex gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={prevTestimonial}
                >
                  <ChevronLeft className="w-4 h-4" />
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={nextTestimonial}
                >
                  <ChevronRight className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </motion.div>

          {/* Chat Interface */}
          <motion.div
            key={`chat-${currentTestimonial}`}
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="relative"
          >
            <div className="bg-white/90 dark:bg-slate-800/90 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/20 dark:border-slate-700/50 overflow-hidden">
              {/* Chat Header */}
              <div className="flex items-center gap-3 p-6 border-b border-border/50 bg-gradient-to-r from-green-500/10 to-blue-500/10">
                <div className="flex gap-2">
                  <div className="w-3 h-3 bg-red-400 rounded-full"></div>
                  <div className="w-3 h-3 bg-yellow-400 rounded-full"></div>
                  <div className="w-3 h-3 bg-green-400 rounded-full"></div>
                </div>
                <div className="flex-1 text-center">
                  <h4 className="font-semibold">Cu·ªôc tr√≤ chuy·ªán v·ªõi {current.name}</h4>
                  <p className="text-xs text-muted-foreground">ChatStory AI</p>
                </div>
              </div>

              {/* Chat Messages */}
              <div className="p-6 space-y-4 h-80">
                <AnimatePresence mode="wait">
                  {current.messages.map((msg, index) => (
                    <motion.div
                      key={`${currentTestimonial}-${index}`}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.3 }}
                    >
                      <ChatBubble
                        message={msg.message}
                        isUser={msg.isUser}
                        name={msg.isUser ? current.name : "ChatStory AI"}
                        timestamp={msg.timestamp}
                        delay={0}
                      />
                    </motion.div>
                  ))}
                </AnimatePresence>
              </div>
            </div>
          </motion.div>
        </div>

        {/* Stats */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.4 }}
          viewport={{ once: true }}
          className="grid grid-cols-2 md:grid-cols-4 gap-8 mt-16 text-center"
        >
          <div>
            <div className="text-3xl font-bold text-green-600">98%</div>
            <div className="text-sm text-muted-foreground">H√†i l√≤ng</div>
          </div>
          <div>
            <div className="text-3xl font-bold text-blue-600">1000+</div>
            <div className="text-sm text-muted-foreground">C√¢u chuy·ªán</div>
          </div>
          <div>
            <div className="text-3xl font-bold text-purple-600">500+</div>
            <div className="text-sm text-muted-foreground">T√°c gi·∫£</div>
          </div>
          <div>
            <div className="text-3xl font-bold text-pink-600">24/7</div>
            <div className="text-sm text-muted-foreground">H·ªó tr·ª£</div>
          </div>
        </motion.div>
      </div>
    </section>
  )
}
